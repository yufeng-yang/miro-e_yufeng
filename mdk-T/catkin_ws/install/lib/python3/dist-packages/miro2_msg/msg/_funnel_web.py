# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from miro2_msg/funnel_web.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import miro2_msg.msg
import std_msgs.msg

class funnel_web(genpy.Message):
  _md5sum = "76a57687660541f43a46784ba4f65383"
  _type = "miro2_msg/funnel_web"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#	@section COPYRIGHT
#	Copyright (C) 2023 Consequential Robotics Ltd
#	
#	@section AUTHOR
#	Consequential Robotics http://consequentialrobotics.com
#	
#	@section LICENSE
#	For a full copy of the license agreement, and a complete
#	definition of "The Software", see LICENSE in the MDK root
#	directory.
#	
#	Subject to the terms of this Agreement, Consequential
#	Robotics grants to you a limited, non-exclusive, non-
#	transferable license, without right to sub-license, to use
#	"The Software" in accordance with this Agreement and any
#	other written agreement with Consequential Robotics.
#	Consequential Robotics does not transfer the title of "The
#	Software" to you; the license granted to you is not a sale.
#	This agreement is a binding legal agreement between
#	Consequential Robotics and the purchasers or users of "The
#	Software".
#	
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
#	KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
#	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
#	PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
#	OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#	OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
#	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	
#
#	This message packages several messages for simple
#	delivery to the web client.



float32[2] cliff
float32[4] light
float32 sonar
uint16[2] touch
uint32[6] illum
float32 audio_level
uint16[] tones
img_annotation img_ann

================================================================================
MSG: miro2_msg/img_annotation
#	@section COPYRIGHT
#	Copyright (C) 2023 Consequential Robotics Ltd
#	
#	@section AUTHOR
#	Consequential Robotics http://consequentialrobotics.com
#	
#	@section LICENSE
#	For a full copy of the license agreement, and a complete
#	definition of "The Software", see LICENSE in the MDK root
#	directory.
#	
#	Subject to the terms of this Agreement, Consequential
#	Robotics grants to you a limited, non-exclusive, non-
#	transferable license, without right to sub-license, to use
#	"The Software" in accordance with this Agreement and any
#	other written agreement with Consequential Robotics.
#	Consequential Robotics does not transfer the title of "The
#	Software" to you; the license granted to you is not a sale.
#	This agreement is a binding legal agreement between
#	Consequential Robotics and the purchasers or users of "The
#	Software".
#	
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
#	KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
#	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
#	PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
#	OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#	OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
#	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	
#
#	This message defines all of the required parameters needed to annotate
# the camera images with output from the vision.py library. This is mainly
# used to provide output to mirocode.



#### HEADER

# standard header
std_msgs/Header header



#### CONTENT

std_msgs/String type
std_msgs/String cam
std_msgs/Float32MultiArray centre
std_msgs/Float32MultiArray vertices
std_msgs/Float32 size
std_msgs/Float32 area
std_msgs/UInt8 id
std_msgs/Float32 distance

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Float32MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
float32[]         data          # array of data


================================================================================
MSG: std_msgs/MultiArrayLayout
# The multiarray declares a generic multi-dimensional array of a
# particular data type.  Dimensions are ordered from outer most
# to inner most.

MultiArrayDimension[] dim # Array of dimension properties
uint32 data_offset        # padding elements at front of data

# Accessors should ALWAYS be written in terms of dimension stride
# and specified outer-most dimension first.
# 
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
#
# A standard, 3-channel 640x480 image with interleaved color channels
# would be specified as:
#
# dim[0].label  = "height"
# dim[0].size   = 480
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
# dim[1].label  = "width"
# dim[1].size   = 640
# dim[1].stride = 3*640 = 1920
# dim[2].label  = "channel"
# dim[2].size   = 3
# dim[2].stride = 3
#
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.

================================================================================
MSG: std_msgs/MultiArrayDimension
string label   # label of given dimension
uint32 size    # size of given dimension (in type units)
uint32 stride  # stride of given dimension
================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: std_msgs/UInt8
uint8 data
"""
  __slots__ = ['cliff','light','sonar','touch','illum','audio_level','tones','img_ann']
  _slot_types = ['float32[2]','float32[4]','float32','uint16[2]','uint32[6]','float32','uint16[]','miro2_msg/img_annotation']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cliff,light,sonar,touch,illum,audio_level,tones,img_ann

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(funnel_web, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cliff is None:
        self.cliff = [0.] * 2
      if self.light is None:
        self.light = [0.] * 4
      if self.sonar is None:
        self.sonar = 0.
      if self.touch is None:
        self.touch = [0] * 2
      if self.illum is None:
        self.illum = [0] * 6
      if self.audio_level is None:
        self.audio_level = 0.
      if self.tones is None:
        self.tones = []
      if self.img_ann is None:
        self.img_ann = miro2_msg.msg.img_annotation()
    else:
      self.cliff = [0.] * 2
      self.light = [0.] * 4
      self.sonar = 0.
      self.touch = [0] * 2
      self.illum = [0] * 6
      self.audio_level = 0.
      self.tones = []
      self.img_ann = miro2_msg.msg.img_annotation()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_2f().pack(*self.cliff))
      buff.write(_get_struct_4f().pack(*self.light))
      _x = self.sonar
      buff.write(_get_struct_f().pack(_x))
      buff.write(_get_struct_2H().pack(*self.touch))
      buff.write(_get_struct_6I().pack(*self.illum))
      _x = self.audio_level
      buff.write(_get_struct_f().pack(_x))
      length = len(self.tones)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.tones))
      _x = self
      buff.write(_get_struct_3I().pack(_x.img_ann.header.seq, _x.img_ann.header.stamp.secs, _x.img_ann.header.stamp.nsecs))
      _x = self.img_ann.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.img_ann.type.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.img_ann.cam.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.img_ann.centre.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.img_ann.centre.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.img_ann.centre.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.img_ann.centre.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.img_ann.centre.data))
      length = len(self.img_ann.vertices.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.img_ann.vertices.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.img_ann.vertices.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.img_ann.vertices.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.img_ann.vertices.data))
      _x = self
      buff.write(_get_struct_2fBf().pack(_x.img_ann.size.data, _x.img_ann.area.data, _x.img_ann.id.data, _x.img_ann.distance.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      if sys.version_info >= (3,0): codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.img_ann is None:
        self.img_ann = miro2_msg.msg.img_annotation()
      end = 0
      start = end
      end += 8
      self.cliff = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 16
      self.light = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 4
      (self.sonar,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      self.touch = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 24
      self.illum = _get_struct_6I().unpack(str[start:end])
      start = end
      end += 4
      (self.audio_level,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tones = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.img_ann.header.seq, _x.img_ann.header.stamp.secs, _x.img_ann.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.img_ann.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.img_ann.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.img_ann.type.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.img_ann.type.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.img_ann.cam.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.img_ann.cam.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.img_ann.centre.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.img_ann.centre.layout.dim.append(val1)
      start = end
      end += 4
      (self.img_ann.centre.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.img_ann.centre.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.img_ann.vertices.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.img_ann.vertices.layout.dim.append(val1)
      start = end
      end += 4
      (self.img_ann.vertices.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.img_ann.vertices.data = s.unpack(str[start:end])
      _x = self
      start = end
      end += 13
      (_x.img_ann.size.data, _x.img_ann.area.data, _x.img_ann.id.data, _x.img_ann.distance.data,) = _get_struct_2fBf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.cliff.tostring())
      buff.write(self.light.tostring())
      _x = self.sonar
      buff.write(_get_struct_f().pack(_x))
      buff.write(self.touch.tostring())
      buff.write(self.illum.tostring())
      _x = self.audio_level
      buff.write(_get_struct_f().pack(_x))
      length = len(self.tones)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.tones.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.img_ann.header.seq, _x.img_ann.header.stamp.secs, _x.img_ann.header.stamp.nsecs))
      _x = self.img_ann.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.img_ann.type.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.img_ann.cam.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.img_ann.centre.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.img_ann.centre.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.img_ann.centre.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.img_ann.centre.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.img_ann.centre.data.tostring())
      length = len(self.img_ann.vertices.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.img_ann.vertices.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      _x = self.img_ann.vertices.layout.data_offset
      buff.write(_get_struct_I().pack(_x))
      length = len(self.img_ann.vertices.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.img_ann.vertices.data.tostring())
      _x = self
      buff.write(_get_struct_2fBf().pack(_x.img_ann.size.data, _x.img_ann.area.data, _x.img_ann.id.data, _x.img_ann.distance.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      if sys.version_info >= (3,0): codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.img_ann is None:
        self.img_ann = miro2_msg.msg.img_annotation()
      end = 0
      start = end
      end += 8
      self.cliff = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 16
      self.light = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 4
      (self.sonar,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      self.touch = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 24
      self.illum = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=6)
      start = end
      end += 4
      (self.audio_level,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tones = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      _x = self
      start = end
      end += 12
      (_x.img_ann.header.seq, _x.img_ann.header.stamp.secs, _x.img_ann.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.img_ann.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.img_ann.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.img_ann.type.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.img_ann.type.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.img_ann.cam.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.img_ann.cam.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.img_ann.centre.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.img_ann.centre.layout.dim.append(val1)
      start = end
      end += 4
      (self.img_ann.centre.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.img_ann.centre.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.img_ann.vertices.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.img_ann.vertices.layout.dim.append(val1)
      start = end
      end += 4
      (self.img_ann.vertices.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.img_ann.vertices.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 13
      (_x.img_ann.size.data, _x.img_ann.area.data, _x.img_ann.id.data, _x.img_ann.distance.data,) = _get_struct_2fBf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2H = None
def _get_struct_2H():
    global _struct_2H
    if _struct_2H is None:
        _struct_2H = struct.Struct("<2H")
    return _struct_2H
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2fBf = None
def _get_struct_2fBf():
    global _struct_2fBf
    if _struct_2fBf is None:
        _struct_2fBf = struct.Struct("<2fBf")
    return _struct_2fBf
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_6I = None
def _get_struct_6I():
    global _struct_6I
    if _struct_6I is None:
        _struct_6I = struct.Struct("<6I")
    return _struct_6I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
