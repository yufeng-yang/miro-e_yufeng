// Generated by gencpp from file miro2_msg/funnel_web.msg
// DO NOT EDIT!


#ifndef MIRO2_MSG_MESSAGE_FUNNEL_WEB_H
#define MIRO2_MSG_MESSAGE_FUNNEL_WEB_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <miro2_msg/img_annotation.h>

namespace miro2_msg
{
template <class ContainerAllocator>
struct funnel_web_
{
  typedef funnel_web_<ContainerAllocator> Type;

  funnel_web_()
    : cliff()
    , light()
    , sonar(0.0)
    , touch()
    , illum()
    , audio_level(0.0)
    , tones()
    , img_ann()  {
      cliff.assign(0.0);

      light.assign(0.0);

      touch.assign(0);

      illum.assign(0);
  }
  funnel_web_(const ContainerAllocator& _alloc)
    : cliff()
    , light()
    , sonar(0.0)
    , touch()
    , illum()
    , audio_level(0.0)
    , tones(_alloc)
    , img_ann(_alloc)  {
  (void)_alloc;
      cliff.assign(0.0);

      light.assign(0.0);

      touch.assign(0);

      illum.assign(0);
  }



   typedef boost::array<float, 2>  _cliff_type;
  _cliff_type cliff;

   typedef boost::array<float, 4>  _light_type;
  _light_type light;

   typedef float _sonar_type;
  _sonar_type sonar;

   typedef boost::array<uint16_t, 2>  _touch_type;
  _touch_type touch;

   typedef boost::array<uint32_t, 6>  _illum_type;
  _illum_type illum;

   typedef float _audio_level_type;
  _audio_level_type audio_level;

   typedef std::vector<uint16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint16_t>> _tones_type;
  _tones_type tones;

   typedef  ::miro2_msg::img_annotation_<ContainerAllocator>  _img_ann_type;
  _img_ann_type img_ann;





  typedef boost::shared_ptr< ::miro2_msg::funnel_web_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::miro2_msg::funnel_web_<ContainerAllocator> const> ConstPtr;

}; // struct funnel_web_

typedef ::miro2_msg::funnel_web_<std::allocator<void> > funnel_web;

typedef boost::shared_ptr< ::miro2_msg::funnel_web > funnel_webPtr;
typedef boost::shared_ptr< ::miro2_msg::funnel_web const> funnel_webConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::miro2_msg::funnel_web_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::miro2_msg::funnel_web_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::miro2_msg::funnel_web_<ContainerAllocator1> & lhs, const ::miro2_msg::funnel_web_<ContainerAllocator2> & rhs)
{
  return lhs.cliff == rhs.cliff &&
    lhs.light == rhs.light &&
    lhs.sonar == rhs.sonar &&
    lhs.touch == rhs.touch &&
    lhs.illum == rhs.illum &&
    lhs.audio_level == rhs.audio_level &&
    lhs.tones == rhs.tones &&
    lhs.img_ann == rhs.img_ann;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::miro2_msg::funnel_web_<ContainerAllocator1> & lhs, const ::miro2_msg::funnel_web_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace miro2_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::miro2_msg::funnel_web_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::miro2_msg::funnel_web_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::miro2_msg::funnel_web_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::miro2_msg::funnel_web_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::miro2_msg::funnel_web_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::miro2_msg::funnel_web_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::miro2_msg::funnel_web_<ContainerAllocator> >
{
  static const char* value()
  {
    return "76a57687660541f43a46784ba4f65383";
  }

  static const char* value(const ::miro2_msg::funnel_web_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x76a57687660541f4ULL;
  static const uint64_t static_value2 = 0x3a46784ba4f65383ULL;
};

template<class ContainerAllocator>
struct DataType< ::miro2_msg::funnel_web_<ContainerAllocator> >
{
  static const char* value()
  {
    return "miro2_msg/funnel_web";
  }

  static const char* value(const ::miro2_msg::funnel_web_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::miro2_msg::funnel_web_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#	@section COPYRIGHT\n"
"#	Copyright (C) 2023 Consequential Robotics Ltd\n"
"#	\n"
"#	@section AUTHOR\n"
"#	Consequential Robotics http://consequentialrobotics.com\n"
"#	\n"
"#	@section LICENSE\n"
"#	For a full copy of the license agreement, and a complete\n"
"#	definition of \"The Software\", see LICENSE in the MDK root\n"
"#	directory.\n"
"#	\n"
"#	Subject to the terms of this Agreement, Consequential\n"
"#	Robotics grants to you a limited, non-exclusive, non-\n"
"#	transferable license, without right to sub-license, to use\n"
"#	\"The Software\" in accordance with this Agreement and any\n"
"#	other written agreement with Consequential Robotics.\n"
"#	Consequential Robotics does not transfer the title of \"The\n"
"#	Software\" to you; the license granted to you is not a sale.\n"
"#	This agreement is a binding legal agreement between\n"
"#	Consequential Robotics and the purchasers or users of \"The\n"
"#	Software\".\n"
"#	\n"
"#	THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY\n"
"#	KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n"
"#	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\n"
"#	PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\n"
"#	OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n"
"#	OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n"
"#	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n"
"#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
"#	\n"
"#\n"
"#	This message packages several messages for simple\n"
"#	delivery to the web client.\n"
"\n"
"\n"
"\n"
"float32[2] cliff\n"
"float32[4] light\n"
"float32 sonar\n"
"uint16[2] touch\n"
"uint32[6] illum\n"
"float32 audio_level\n"
"uint16[] tones\n"
"img_annotation img_ann\n"
"\n"
"================================================================================\n"
"MSG: miro2_msg/img_annotation\n"
"#	@section COPYRIGHT\n"
"#	Copyright (C) 2023 Consequential Robotics Ltd\n"
"#	\n"
"#	@section AUTHOR\n"
"#	Consequential Robotics http://consequentialrobotics.com\n"
"#	\n"
"#	@section LICENSE\n"
"#	For a full copy of the license agreement, and a complete\n"
"#	definition of \"The Software\", see LICENSE in the MDK root\n"
"#	directory.\n"
"#	\n"
"#	Subject to the terms of this Agreement, Consequential\n"
"#	Robotics grants to you a limited, non-exclusive, non-\n"
"#	transferable license, without right to sub-license, to use\n"
"#	\"The Software\" in accordance with this Agreement and any\n"
"#	other written agreement with Consequential Robotics.\n"
"#	Consequential Robotics does not transfer the title of \"The\n"
"#	Software\" to you; the license granted to you is not a sale.\n"
"#	This agreement is a binding legal agreement between\n"
"#	Consequential Robotics and the purchasers or users of \"The\n"
"#	Software\".\n"
"#	\n"
"#	THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY\n"
"#	KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n"
"#	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\n"
"#	PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\n"
"#	OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n"
"#	OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n"
"#	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n"
"#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
"#	\n"
"#\n"
"#	This message defines all of the required parameters needed to annotate\n"
"# the camera images with output from the vision.py library. This is mainly\n"
"# used to provide output to mirocode.\n"
"\n"
"\n"
"\n"
"#### HEADER\n"
"\n"
"# standard header\n"
"std_msgs/Header header\n"
"\n"
"\n"
"\n"
"#### CONTENT\n"
"\n"
"std_msgs/String type\n"
"std_msgs/String cam\n"
"std_msgs/Float32MultiArray centre\n"
"std_msgs/Float32MultiArray vertices\n"
"std_msgs/Float32 size\n"
"std_msgs/Float32 area\n"
"std_msgs/UInt8 id\n"
"std_msgs/Float32 distance\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float32[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
"================================================================================\n"
"MSG: std_msgs/UInt8\n"
"uint8 data\n"
;
  }

  static const char* value(const ::miro2_msg::funnel_web_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::miro2_msg::funnel_web_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cliff);
      stream.next(m.light);
      stream.next(m.sonar);
      stream.next(m.touch);
      stream.next(m.illum);
      stream.next(m.audio_level);
      stream.next(m.tones);
      stream.next(m.img_ann);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct funnel_web_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::miro2_msg::funnel_web_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::miro2_msg::funnel_web_<ContainerAllocator>& v)
  {
    s << indent << "cliff[]" << std::endl;
    for (size_t i = 0; i < v.cliff.size(); ++i)
    {
      s << indent << "  cliff[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cliff[i]);
    }
    s << indent << "light[]" << std::endl;
    for (size_t i = 0; i < v.light.size(); ++i)
    {
      s << indent << "  light[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.light[i]);
    }
    s << indent << "sonar: ";
    Printer<float>::stream(s, indent + "  ", v.sonar);
    s << indent << "touch[]" << std::endl;
    for (size_t i = 0; i < v.touch.size(); ++i)
    {
      s << indent << "  touch[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.touch[i]);
    }
    s << indent << "illum[]" << std::endl;
    for (size_t i = 0; i < v.illum.size(); ++i)
    {
      s << indent << "  illum[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.illum[i]);
    }
    s << indent << "audio_level: ";
    Printer<float>::stream(s, indent + "  ", v.audio_level);
    s << indent << "tones[]" << std::endl;
    for (size_t i = 0; i < v.tones.size(); ++i)
    {
      s << indent << "  tones[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.tones[i]);
    }
    s << indent << "img_ann: ";
    s << std::endl;
    Printer< ::miro2_msg::img_annotation_<ContainerAllocator> >::stream(s, indent + "  ", v.img_ann);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIRO2_MSG_MESSAGE_FUNNEL_WEB_H
